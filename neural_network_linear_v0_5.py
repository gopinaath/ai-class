# -*- coding: utf-8 -*-
"""Neural-Network -quadratic-v0.5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AwhSYzsUwEERGpaNtprS593HHn9i5CFp
"""

import torch
from torch import nn
import random

def mystery(a, b):
  return torch.tensor(3*a+4*b)

print(mystery(1,1))

model = nn.Sequential(nn.Linear(2, 1))
model

criterion = nn.MSELoss()
optimizer = torch.optim.SGD(model.parameters(), lr=0.01, momentum= 0.9)

for i in range(20000):
  a = random.random()
  b = random.random()
  desiredOutput = mystery(a,b)

  output = model(torch.tensor([a,b]))
  loss = criterion(output.squeeze(), desiredOutput)

  if(i % 1000) == 0:
    print(f"Loss: {loss.item()}")

  optimizer.zero_grad()
  loss.backward()
  optimizer.step()

a = 1.0
b = -1.0

output = model(torch.tensor([a,b]))
print(output.item())

print(mystery(a,b))